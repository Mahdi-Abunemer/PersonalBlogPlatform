// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalBlogPlatform.Infrastructure.DbContext;

#nullable disable

namespace PersonalBlogPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250623063423_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            RoleId = new Guid("172a5a39-14f4-4b06-8c1f-5cd22028253d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("62f4a8c6-a982-4f18-9ef7-932ed1d4da44"),
                            CategoryName = "Travel",
                            CreatedById = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            Slug = "travel"
                        },
                        new
                        {
                            Id = new Guid("6e6e4652-4cd8-4a5b-9293-e19e7e1a2fa7"),
                            CategoryName = "Cooking",
                            CreatedById = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            Slug = "cooking"
                        },
                        new
                        {
                            Id = new Guid("e3c82d74-3817-4291-99ea-bca6fac7bdab"),
                            CategoryName = "Gardening",
                            CreatedById = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            Slug = "gardening"
                        });
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PostId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("PostDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fca05dd-6fd1-472d-b39a-6528733dcd3c"),
                            CategoryId = new Guid("62f4a8c6-a982-4f18-9ef7-932ed1d4da44"),
                            Content = "Last weekend, I escaped to a peaceful lakehouse to recharge. The water was crystal clear, and the sunsets were unforgettable.",
                            CreatedAt = new DateTime(2025, 6, 2, 9, 0, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            IsPublished = true,
                            PostDetails = "Reflections on rest, nature, and unplugging from the city.",
                            Title = "A Weekend Getaway to the Lake"
                        },
                        new
                        {
                            Id = new Guid("87dce5d7-b70d-4b79-b4e2-14a725e4282a"),
                            CategoryId = new Guid("62f4a8c6-a982-4f18-9ef7-932ed1d4da44"),
                            Content = "This refreshing salad combines ripe tomatoes, cucumber, feta cheese, and a homemade lemon vinaigrette. Perfect for hot afternoons!",
                            CreatedAt = new DateTime(2025, 6, 6, 11, 30, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            IsPublished = true,
                            PostDetails = "A quick, healthy dish for summer meals.",
                            Title = "My Favorite Summer Salad Recipe"
                        },
                        new
                        {
                            Id = new Guid("8ab19e2b-29ca-4f97-8478-bb4023c81a69"),
                            CategoryId = new Guid("6e6e4652-4cd8-4a5b-9293-e19e7e1a2fa7"),
                            Content = "Even if you have no yard space, you can grow basil, mint, and parsley in pots. Here’s how I did it in just three weeks.",
                            CreatedAt = new DateTime(2025, 6, 9, 8, 15, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            IsPublished = true,
                            PostDetails = "Tips for urban gardening beginners.",
                            Title = "Starting a Small Herb Garden on Your Balcony"
                        },
                        new
                        {
                            Id = new Guid("b499af0c-2ecd-40aa-91ba-f118f2005142"),
                            CategoryId = new Guid("6e6e4652-4cd8-4a5b-9293-e19e7e1a2fa7"),
                            Content = "I’ve been practicing five minutes of mindfulness every morning, and it’s transformed my focus and calm throughout the day.",
                            CreatedAt = new DateTime(2025, 6, 12, 7, 0, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            IsPublished = true,
                            PostDetails = "A simple routine for mental clarity.",
                            Title = "The Joy of Morning Meditation"
                        },
                        new
                        {
                            Id = new Guid("e935ead1-c74f-4045-ab46-7471975c99e6"),
                            CategoryId = new Guid("e3c82d74-3817-4291-99ea-bca6fac7bdab"),
                            Content = "After a month of trials, I finally perfected my sourdough starter. Here’s the recipe and tips for achieving that perfect crust.",
                            CreatedAt = new DateTime(2025, 6, 17, 15, 45, 0, 0, DateTimeKind.Utc),
                            CreatedById = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            IsPublished = true,
                            PostDetails = "Step‑by‑step sourdough guide for home bakers.",
                            Title = "Baking Sourdough Bread at Home"
                        });
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("172a5a39-14f4-4b06-8c1f-5cd22028253d"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("58abd188-a359-4443-9644-a926b699b305"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b709a33-9e1e-485a-b997-6c3d79632a66",
                            DisplayName = "Site Admin",
                            Email = "admin@blog.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BLOG.COM",
                            NormalizedUserName = "ADMIN@BLOG.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM0WcE+XS0GA7sTtQ4NZZVi8gQsw/kiazmMcN3WRtdHVvpyyZ6ZBhtIFFQNbMKOjkw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@blog.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.Entities.Category", b =>
                {
                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.Entities.Comment", b =>
                {
                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalBlogPlatform.Core.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.Entities.Post", b =>
                {
                    b.HasOne("PersonalBlogPlatform.Core.Domain.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("PersonalBlogPlatform.Core.Domain.IdentityEntities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("PersonalBlogPlatform.Core.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
